/**
 * Tribe Segmentation, Recommendation and Lake Data Request API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.wordnik.client.api

import com.wordnik.client.model.Inline_response_200

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class CalendarApi(implicit val swagger: Swagger) extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "CalendarApi"
  override protected val applicationName: Option[String] = Some("/v1/Calendar")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }

  val calenderRecommendationPostOperation = (apiOperation[List[Inline_response_200]]("calenderRecommendationPost")
    summary ""
    parameters (queryParam[String]("requestSource").description(""), queryParam[List[String]]("sailorIDs").description(""), queryParam[List[String]]("reservationIDs").description(""), queryParam[List[String]]("place").description(""), queryParam[List[String]]("qtyPerPlace").description(""), queryParam[String]("dateRange").description(""), queryParam[String]("channel").description(""), queryParam[Int]("correlationID").description("").optional, queryParam[List[String]]("metaData").description("").optional)
  )

  post("/calenderRecommendation", operation(calenderRecommendationPostOperation)) {

    val requestSource = params.getAs[String]("requestSource")

    println("requestSource: " + requestSource)

    val sailorIDsString = params.getAs[String]("sailorIDs")
    val sailorIDs = if ("multi" == "default" || "multi" == "csv") {
      sailorIDsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    println("sailorIDs: " + sailorIDs)

    val reservationIDsString = params.getAs[String]("reservationIDs")
    val reservationIDs = if ("multi" == "default" || "multi" == "csv") {
      reservationIDsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    println("reservationIDs: " + reservationIDs)

    val placeString = params.getAs[String]("place")
    val place = if ("multi" == "default" || "multi" == "csv") {
      placeString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    println("place: " + place)

    val qtyPerPlaceString = params.getAs[String]("qtyPerPlace")
    val qtyPerPlace = if ("multi" == "default" || "multi" == "csv") {
      qtyPerPlaceString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    println("qtyPerPlace: " + qtyPerPlace)

    val dateRange = params.getAs[String]("dateRange")

    println("dateRange: " + dateRange)

    val channel = params.getAs[String]("channel")

    println("channel: " + channel)

    val correlationID = params.getAs[Int]("correlationID")

    println("correlationID: " + correlationID)

    val metaDataString = params.getAs[String]("metaData")
    val metaData = if ("multi" == "default" || "multi" == "csv") {
      metaDataString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    println("metaData: " + metaData)
  }

}
